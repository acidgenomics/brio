% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{import}
\alias{import}
\title{Import}
\usage{
import(file, sheet = 1L, rownames = TRUE, colnames = TRUE)
}
\arguments{
\item{file}{\code{character(1)}.
File path.}

\item{sheet}{\emph{Applies to Excel Workbook, Google Sheet, or GraphPad Prism file.}\cr
\code{character(1)} or \code{integer(1)}.
Sheet to read. Either a string (the name of a sheet), or an integer (the
position of the sheet). Defaults to the first sheet.}

\item{rownames}{\code{logical(1)}.
Automatically assign row names, if \code{rowname} column is defined.
Applies to file types that return \code{data.frame} only.}

\item{colnames}{\code{logical(1)}.
Automatically assign column names, using the first header row.
Applies to file types that return \code{data.frame} only.}
}
\value{
Varies, depending on the file type.
\itemize{
\item \strong{Plain text delimited} (\code{CSV}, \code{TSV}, \code{TXT}): \code{data.frame}.\cr
Data separated by commas, tabs, or visual spaces.\cr
Note that TXT structure is amgibuous and actively discouraged.\cr
Refer to \code{Data frame return} section for details on how to change the
default return type to \code{DataFrame}, \code{tbl_df} or \code{data.table}.\cr
Imported by \code{\link[data.table:fread]{data.table::fread()}}.
\item \strong{Excel workbook} (\code{XLSB}, \code{XLSX}): \code{data.frame}.\cr
Resave in plain text delimited format instead, if possible.\cr
Imported by \code{\link[readxl:read_excel]{readxl::read_excel()}}.
\item \strong{Legacy Excel workbook (pre-2007)} (\code{XLS}): \code{data.frame}.\cr
Resave in plain text delimited format instead, if possible.\cr
Note that import of files in this format is slow.\cr
Imported by \code{\link[gdata:read.xls]{gdata::read.xls()}}.
\item \strong{GraphPad Prism project} (\code{PZFX}): \code{data.frame}.\cr
Experimental. Consider resaving in CSV format instead.\cr
Imported by \code{\link[pzfx:read_pzfx]{pzfx::read_pzfx()}}.
\item \strong{General feature format} (\code{GFF}, \code{GFF1}, \code{GFF2}, \code{GFF3}, \code{GTF}):
\code{GRanges}.\cr
Imported by \code{\link[rtracklayer:import]{rtracklayer::import()}}.
\item \strong{MatrixMarket exchange sparse matrix} (\code{MTX}): \code{sparseMatrix}.\cr
Imported by \code{\link[Matrix:readMM]{Matrix::readMM()}}.
\item \strong{Gene sets (for GSEA)} (\code{GMT}, \code{GMX}): \code{character}.\cr
Imported by \code{\link[readr:read_lines]{readr::read_lines()}}, with additional processing.
\item \strong{Browser extensible data} (\code{BED}, \code{BED15}, \code{BEDGRAPH}, \code{BEDPE}):
\code{GRanges}.\cr
Imported by \code{\link[rtracklayer:import]{rtracklayer::import()}}.
\item \strong{ChIP-seq peaks} (\code{BROADPEAK}, \code{NARROWPEAK}): \code{GRanges}.\cr
Imported by \code{\link[rtracklayer:import]{rtracklayer::import()}}.
\item \strong{Wiggle track format} (\code{BIGWIG}, \code{BW}, \code{WIG}): \code{GRanges}.\cr
Imported by \code{\link[rtracklayer:import]{rtracklayer::import()}}.
\item \strong{JSON serialization data} (\code{JSON}): \code{list}.\cr
Imported by \code{\link[jsonlite:read_json]{jsonlite::read_json()}}.
\item \strong{YAML serialization data} (\code{YAML}, \code{YML}): \code{list}.\cr
Imported by \code{\link[yaml:yaml.load_file]{yaml::yaml.load_file()}}.
\item \strong{Lines} (\code{LOG}, \code{MD}, \code{PY}, \code{R}, \code{RMD}, \code{SH}): \code{character}.
Source code or log files.\cr
Imported by \code{\link[readr:read_lines]{readr::read_lines()}}.
\item \strong{R data serialized} (\code{RDS}): \emph{variable}.\cr
Currently recommend over RDA, if possible.\cr
Imported by \code{\link[base:readRDS]{readRDS()}}.
\item \strong{R data} (\code{RDA}, \code{RDATA}): \emph{variable}.\cr
Must contain a single object.
Doesn't require internal object name to match, unlike \code{\link[=loadData]{loadData()}}.\cr
Imported by \code{\link[base:load]{load()}}.
\item \strong{Infrequently used rio-compatible formats} (\code{ARFF}, \code{DBF}, \code{DIF}, \code{DTA},
\code{MAT}, \code{MTP}, \code{ODS}, \code{POR}, \code{SAS7BDAT}, \code{SAV}, \code{SYD}, \code{REC}, \code{XPT}):
\emph{variable}.\cr
Imported by \code{\link[rio:import]{rio::import()}}.
}
}
\description{
Read file by extension into R.
}
\details{
\code{\link[=import]{import()}} supports automatic loading of common file types, by wrapping
popular importer functions. The function is intentionally designed to be
simple. Remote URLs and compressed files are supported. If you need more
complex import settings, just call the wrapped importer directly instead.
}
\note{
Updated 2019-07-30.
}
\section{Row and column names}{


\strong{Row names.} Row name handling has become an inconsistent mess in R because
of differential support in base R, tidyverse, data.table, and Bioconductor.
To maintain sanity, \code{\link[=import]{import()}} attempts to handle row names automatically.
The function checks for a \code{rowname} column in delimited data, and moves these
values into the object's row names, if supported by the return type (e.g.
\code{data.frame}, \code{DataFrame}). Note that \code{tbl_df} (tibble) and \code{data.table}
intentionally do not support row names. When returning in this format, no
attempt to assign the \code{rowname} column into the return object's row names is
made. Note that \code{\link[=import]{import()}} is strict about this matching and only checks for
a \code{rowname} column, similar to the default syntax recommended in
\code{\link[tibble:rownames_to_column]{tibble::rownames_to_column()}}. To disable this behavior, set
\code{rownames = FALSE}, and no attempt will be made to set the row names.

\strong{Column names.} \code{\link[=import]{import()}} assumes that delimited files always contain
column names. If you are working with a file that doens't contain column
names, either set \code{colnames = FALSE} or call the wrapped importer function
directly instead. It's strongly recommended to always define column names in
a supported file type.
}

\section{Data frame return}{


By default, \code{\link[=import]{import()}} returns a standard \code{data.frame} for delimited/column
formatted data. However, any of these desired output formats can be set
globally using \code{options(acid.data.frame = "data.frame")}.

Supported return types:
\itemize{
\item \code{data.frame}: Base R default. Generally recommended.
\itemize{
\item S3 class.
\item Allows rownames, but they're required and can't be set \code{NULL}.
\item See \code{help(topic = "data.frame", package = "base")} for details.
}
\item \code{DataFrame}: Recommended when working with Bioconductor packages.
\itemize{
\item S4 class; inherits \code{DataTable} virtual class.
\item Allows rownames, but they're optional and can be set \code{NULL}.
\item See \code{help(topic = "DataFrame", package = "S4Vectors")} for details.
}
\item \code{tbl_df} (\code{tibble}): Recommended when working with tidyverse packages.
\itemize{
\item S3 class; inherits \code{data.frame}.
\item Does not allow rownames.
\item See \code{help(topic = "tibble", package = "tibble")} for details.
}
\item \code{data.table}: Recommended when working with the data.table package.
\itemize{
\item S3 class; inherits \code{data.frame}.
\item Does not allow rownames.
\item See \code{help(topic = "data.table", package = "data.table")} for details.
}
}

Note that \code{stringsAsFactors} is always disabled for import.
}

\section{Matrix Market Exchange (MTX)}{


Reading a Matrix Market Exchange file requires \code{ROWNAMES} and \code{COLNAMES}
sidecar files containing the corresponding row and column names of the sparse
matrix.
}

\section{General feature format (GFF, GTF)}{


The GFF (General Feature Format) format consists of one line per feature,
each containing 9 columns of data, plus optional track definition lines. The
GTF (General Transfer Format) is identical to GFF version 2.

\href{https://steinbaugh.com/basejump/}{basejump} exports the specialized \code{makeGRangesFromGFF()} function that
makes GFF loading simple.

See also:
\itemize{
\item \href{http://www.ensembl.org/info/website/upload/gff.html}{Ensembl spec}
\item \href{http://www.gencodegenes.org/gencodeformat.html}{GENCODE spec}
}
}

\section{Gene sets (GMT, GMX)}{


Refer to the Broad Institute \href{https://goo.gl/3ZkDPb}{GSEA wiki} for details.
}

\section{bcbio count matrix}{


\href{https://bcbio-nextgen.readthedocs.io/}{bcbio} count matrix and related sidecar files are natively supported.
\itemize{
\item \code{COUNTS}: Counts table (e.g. RNA-seq aligned counts).
\item \code{COLNAMES}: Sidecar file containing column names.
\item \code{ROWNAMES}: Sidecar file containing row names.
}
}

\section{Blacklisted extensions}{


These file formats are blacklisted, and intentionally not supported:
\code{DOC}, \code{DOCX}, \code{PDF}, \code{PPT}, \code{PPTX}.
}

\examples{
file <- system.file("extdata/example.csv", package = "brio")

## Row and column names enabled.
x <- import(file)
print(head(x))

## Row and column names disabled.
x <- import(file, rownames = FALSE, colnames = FALSE)
print(head(x))
}
\seealso{
Packages:
\itemize{
\item \href{https://cran.r-project.org/package=rio}{rio}.
\item \href{http://bioconductor.org/packages/rtracklayer/}{rtracklayer}.
\item \href{http://r-datatable.com/}{data.table}.
\item \href{http://readr.tidyverse.org}{readr}.
\item \href{http://readxl.tidyverse.org}{readxl}.
}

Importer functions:
\itemize{
\item \code{rtracklayer::import()}.
\item \code{rio::import()}.
\item \code{data.table::fread()}.
\item \code{readr::read_csv()}.
\item \code{utils::read.table()}.
}
}
