% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{import}
\alias{import}
\title{Import}
\usage{
import(file, sheet = 1L)
}
\arguments{
\item{file}{\code{character(1)}.
File path.}

\item{sheet}{\code{character(1)} (recommended) or \code{integer(1)}.
\emph{Apples only to Excel Workbook or Google Sheet import.}
Sheet to read. Either a string (the name of a sheet), or an integer (the
position of the sheet). Defaults to the first sheet.}
}
\value{
Varies, depending on the file extension:
\itemize{
\item \emph{Default.} \code{CSV}, \code{TSV}, \code{TXT}, \code{XLS}, \code{XLSX}: \code{data.frame}.
See \code{Data frame return} section for details on how to change the default
return type.
\item \code{GTF}, \code{GFF}: \code{GRanges}.
\item \code{MTX}: \code{sparseMatrix}.
\item \code{JSON}, \code{YAML}: \code{list}.
\item \emph{Source code or log.} \code{LOG}, \code{MD}, \code{PY}, \code{R}, \code{RMD}, \code{SH}: \code{character}.
}
}
\description{
Read file by extension into R.
}
\details{
Remote URLs and compressed files are supported. All extensions are case
insensitive.

\code{\link[=import]{import()}} supports automatic loading of common file types, by wrapping
popular importer functions. The function is intentionally designed to be
simple. If you need more complex import settings, just call the wrapped
importer directly instead.
}
\section{Supported file types}{

\itemize{
\item \code{CSV}: Comma Separated Values.\cr
Imported by \code{\link[data.table:fread]{data.table::fread()}}.
\item \code{TSV} Tab Separated Values.\cr
Imported by \code{\link[data.table:fread]{data.table::fread()}}.
\item \code{TXT}: Text file. \emph{Ambiguous, not recommended}.\cr
Imported by \code{\link[data.table:fread]{data.table::fread()}}.
\item \code{XLSX}, \code{XLS}: Excel workbook.\cr
Imported by \code{\link[readxl:read_excel]{readxl::read_excel()}}.
\item \code{MTX}: MatrixMarket sparse matrix.\cr
Imported by \code{\link[Matrix:readMM]{Matrix::readMM()}}.
\item \code{GTF}, \code{GFF}, \code{GFF3}: General Feature Format.\cr
Imported by \code{\link[rtracklayer:import]{rtracklayer::import()}}.
\item \code{JSON}: JSON.
Imported by \code{\link[jsonlite:read_json]{jsonlite::read_json()}}.
\item \code{YAML}, \code{YML}: YAML.
Imported by \code{\link[yaml:yaml.load_file]{yaml::yaml.load_file()}}.
\item \code{RDA}, \code{RDATA}: R Data.
\itemize{
\item Imported by \code{load}.
\item Must contain a single object.
\item Doesn't require internal object name to match, unlike \code{\link[=loadData]{loadData()}}.
}
\item \code{RDS}: R Data Serialized.\cr
Imported by \code{\link[base:readRDS]{readRDS()}}.
}

These file formats will be imported as source code lines by
\code{\link[readr:read_lines]{readr::read_lines()}}: \code{LOG}, \code{MD}, \code{PY}, \code{R}, \code{RMD}, \code{SH}.

These file formats are blacklisted, and intentionally not supported:
\code{DOC}, \code{DOCX}, \code{PDF}, \code{PPT}, \code{PPTX}.

If a file format isn't supported natively (or blacklisted), the
\href{https://cran.r-project.org/web/packages/rio/index.html}{rio} package will
be used as a fallback attempt. See \code{\link[rio:import]{rio::import()}} for details.
}

\section{Data frame return}{


By default, \code{\link[=import]{import()}} returns a standard \code{data.frame} for delimited/column
formatted data. However, any of these desired output formats can be set
globally using \code{options(brio.data.frame = "data.frame")}:
\itemize{
\item \code{data.frame} (base; default).
\item \code{DataFrame} (S4Vectors).
\item \code{data.table} (data.table).
\item \code{tbl_df} (tibble).
}

Note that \code{stringsAsFactors} is always disabled for import.

Current recommendations (by priority):
\itemize{
\item \code{data.frame}: Base R default. Generally recommended.
\itemize{
\item S3 class.
\item Allows rownames, but they're required and can't be set \code{NULL}.
\item See \code{help(topic = "data.frame", package = "base")} for details.
}
\item \code{DataFrame}: Recommended when working with Bioconductor packages.
\itemize{
\item S4 class; inherits \code{DataTable} virtual class.
\item Allows rownames, but they're optional and can be set \code{NULL}.
\item See \code{help(topic = "DataFrame", package = "S4Vectors")} for details.
}
\item \code{tbl_df} (\code{tibble}): Recommended when working with tidyverse packages.
\itemize{
\item S3 class; inherits \code{data.frame}.
\item Does not allow rownames.
\item See \code{help(topic = "tibble", package = "tibble")} for details.
}
\item \code{data.table}: Recommended when working with the data.table package.
\itemize{
\item S3 class; inherits \code{data.frame}.
\item Does not allow rownames.
\item See \code{help(topic = "data.table", package = "data.table")} for details.
}
}
}

\section{Delimited Files (CSV/TSV)}{


\code{\link[=import]{import()}} uses the \code{\link[data.table:fread]{fread()}} function of the
\href{https://cran.r-project.org/package=data.table}{data.table} package to import standard CSV and TSV files. This should work
automatically for most files without issue.

Here are some notable exceptions:
\itemize{
\item Columns headers should be \code{character}. In the event that a column name
is \code{numeric}, set \code{header = TRUE} here to force the column name.
}

See \code{help(topic = "fread", package = "data.table")} for details.

The \code{\link[readr:read_csv]{read_csv()}} and \code{\link[readr:read_tsv]{read_tsv()}}
functions of the \href{https://readr.tidyverse.org}{readr} package are good alternatives, which return
\code{tibble} data frames (\code{tbl_df}).
}

\section{Google Sheets}{


Public Google Sheets are now supported. Simply paste in the URL.
}

\section{Matrix Market Exchange (MTX/MEX)}{


Reading a Matrix Market Exchange (\code{MTX}) file now requires \code{COLNAMES} and
\code{ROWNAMES} sidecar files containing the \code{colnames} and \code{rownames} of
the sparse matrix. Legacy support for manual loading of these sidecar files
is provided.
}

\section{General Feature Format (GFF/GTF)}{


The GFF (General Feature Format) format consists of one line per feature,
each containing 9 columns of data, plus optional track definition lines. The
GTF (General Transfer Format) is identical to GFF version 2.

Column names follow the \href{https://bit.ly/2K6EBla}{Ensembl conventions}.
Additional information:
\itemize{
\item \href{http://www.ensembl.org/info/website/upload/gff.html}{Ensembl}
\item \href{http://www.gencodegenes.org/gencodeformat.html}{Gencode}
}
}

\section{GMT/GMX files}{


Refer to the Broad Institute \href{https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats}{GSEA wiki} for details.
}

\section{bcbio files}{


Also supports some additional extensions commonly used with the
\href{https://bcbio-nextgen.readthedocs.io}{bcbio} pipeline:
\itemize{
\item \code{COUNTS}: Counts table (e.g. RNA-seq aligned counts).
\item \code{COLNAMES}: Sidecar file containing column names.
\item \code{ROWNAMES}: Sidecar file containing row names.
}
}

\examples{
file <- system.file("extdata/example.csv", package = "brio")
x <- import(file)
print(x)
}
\seealso{
\itemize{
\item \code{utils::read.table()}.
\item \href{http://readr.tidyverse.org}{readr}.
\item \href{http://readxl.tidyverse.org}{readxl}.
\item \href{https://cran.r-project.org/web/packages/Matrix/index.html}{Matrix}.
}
}
