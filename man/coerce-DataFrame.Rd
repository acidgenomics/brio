% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/coerce-DataFrame-methods.R,
%   R/coerce-methods.R
\name{as.DataFrame}
\alias{as.DataFrame}
\alias{as.DataFrame,list-method}
\alias{as.DataFrame,List-method}
\alias{coerce,Matrix,DataFrame-method}
\alias{coerce,data.table,DataFrame-method}
\alias{coerce,tbl_df,DataFrame-method}
\alias{coerce-DataFrame}
\title{Coerce to S4data frame}
\usage{
as.DataFrame(x, ...)

\S4method{as.DataFrame}{list}(x, row.names = NULL)

\S4method{as.DataFrame}{List}(x, row.names = NULL)
}
\arguments{
\item{x}{Object.}

\item{row.names}{\code{NULL} or \code{character}.}

\item{...}{Additional arguments.}
}
\value{
\code{DataFrame}.
}
\description{
Coerce to \code{DataFrame}.
}
\note{
Don't define \code{as} coercion method for \code{list} here. It will create
issues with \code{data.frame} coercion. Use \code{as.DataFrame} instead to coerce
a \code{list} to \code{DataFrame}.

Updated 2020-01-18.
}
\examples{
data(data.table, sparseMatrix, tbl_df, package = "AcidTest")

## Matrix to DataFrame ====
from <- sparseMatrix
to <- as(from, "DataFrame")
to

## data.table to DataFrame ====
from <- data.table
to <- as(from, "DataFrame")
head(to)

## tbl_df to DataFrame ====
from <- tbl_df
to <- as(from, "DataFrame")
head(to)

## list to DataFrame ====
## Use `as.DataFrame()` instead of `as()` for `list` class.
from <- list(
    a = list(c(1, 2), c(3, 4)),
    b = list(NULL, NULL)
)
to <- as.DataFrame(from)
to
}
