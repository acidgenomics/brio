% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export-methods.R
\docType{methods}
\name{export}
\alias{export}
\alias{export,matrix-method}
\alias{export,data.frame-method}
\alias{export,DataFrame-method}
\alias{export,sparseMatrix-method}
\alias{export,GRanges-method}
\alias{export,SummarizedExperiment-method}
\alias{export,SingleCellExperiment-method}
\title{Export}
\usage{
export(object, ...)

\S4method{export}{matrix}(object, ext = getOption("acid.export.ext",
  default = c("csv", "csv.gz", "tsv", "tsv.gz")),
  dir = getOption("acid.export.dir", default = "."), file = NULL,
  overwrite = getOption("acid.overwrite", default = TRUE))

\S4method{export}{data.frame}(object, ext = getOption("acid.export.ext",
  default = c("csv", "csv.gz", "tsv", "tsv.gz")),
  dir = getOption("acid.export.dir", default = "."), file = NULL,
  overwrite = getOption("acid.overwrite", default = TRUE))

\S4method{export}{DataFrame}(object, ext = getOption("acid.export.ext",
  default = c("csv", "csv.gz", "tsv", "tsv.gz")),
  dir = getOption("acid.export.dir", default = "."), file = NULL,
  overwrite = getOption("acid.overwrite", default = TRUE))

\S4method{export}{sparseMatrix}(object,
  ext = getOption("acid.export.sparse.ext", default = c("mtx",
  "mtx.gz")), dir = getOption("acid.export.dir", default = "."),
  file = NULL, overwrite = getOption("acid.overwrite", default = TRUE))

\S4method{export}{GRanges}(object, ext = getOption("acid.export.ext",
  default = c("csv", "csv.gz", "tsv", "tsv.gz")),
  dir = getOption("acid.export.dir", default = "."), file = NULL,
  overwrite = getOption("acid.overwrite", default = TRUE))

\S4method{export}{SummarizedExperiment}(object, name = NULL,
  dir = getOption("acid.export.dir", default = "."),
  compress = getOption("acid.export.compress", default = FALSE),
  slotNames = c("assays", "colData", "rowData"))

\S4method{export}{SingleCellExperiment}(object, name = NULL,
  dir = getOption("acid.export.dir", default = "."),
  compress = getOption("acid.export.compress", default = FALSE),
  slotNames = c("assays", "colData", "rowData", "reducedDims"))
}
\arguments{
\item{object}{Object.
An object supporting \code{\link[base:dim]{dim()}}, or a supported class capable
of being coerced to \code{data.frame}, to be written to disk.}

\item{ext}{\code{character(1)}.
Output file format extension.
Uses \code{\link[base:match.arg]{match.arg()}}, where applicable.}

\item{dir}{\code{character(1)}.
Directory path.}

\item{file}{\code{character(1)}.
File path. When left unset (default), the \code{ext} and \code{dir} arguments will
be used instead.}

\item{overwrite}{\code{logical(1)}.
Overwrite existing file on disk.}

\item{name}{\code{character(1)}.
Name to use on disk. If \code{NULL}, will use the name of the object instead.}

\item{compress}{\code{logical(1)}.
Apply gzip compression to all files.}

\item{slotNames}{\code{character}.
Names of slots to include when writing to disk.}

\item{...}{Additional arguments.}
}
\value{
Invisible \code{character}.
File path(s).
}
\description{
Export data out of R and write to disk.
}
\note{
Updated 2019-07-30.
}
\section{Row names}{


Some export utilities in R have a tendency to drop row names when writing to
disk in CSV format. For example, the \href{https://readr.tidyverse.org/}{readr} family of functions never
write row names by design. This is a \emph{really poor} default setting for
handling genomic data, which often contain gene identifiers in the row names.
Here we're performing any internal tibble coercion step to ensure row names
are always moved to a "\code{rowname}" column in the CSV export.
}

\section{Exporting vectors}{


Use \code{\link[base:writeLines]{writeLines()}} instead of \code{\link[=export]{export()}} to write vectors
to disk. An S4 character method may be defined in a future update, but it is
intentionally unsupported in the current release.
}

\examples{
counts <- matrix(data = seq_len(100L), nrow = 10)
export(counts, ext = "csv")

## Clean up.
file.remove("counts.csv")
}
\seealso{
\itemize{
\item \code{\link[rtracklayer:export]{rtracklayer::export()}}.
\item \code{\link[rio:export]{rio::export()}}.
}
}
